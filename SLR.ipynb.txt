{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "57b60121",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c7748f58",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "361a19f9",
   "metadata": {},
   "source": [
    "# importing data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7705b948",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_data=pd.read_csv(\"C:/Users/SN112/Downloads/Admission_Predict.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3d505c75",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "my_data2=my_data.drop(['Serial No.','GRE Score','TOEFL Score','University Rating','SOP','LOR ','Research'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f366fca8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CGPA</th>\n",
       "      <th>Chance of Admit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.65</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.87</td>\n",
       "      <td>0.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.00</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.67</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.21</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>9.04</td>\n",
       "      <td>0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>9.11</td>\n",
       "      <td>0.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>9.45</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>8.78</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>9.66</td>\n",
       "      <td>0.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CGPA  Chance of Admit \n",
       "0    9.65              0.92\n",
       "1    8.87              0.76\n",
       "2    8.00              0.72\n",
       "3    8.67              0.80\n",
       "4    8.21              0.65\n",
       "..    ...               ...\n",
       "395  9.04              0.82\n",
       "396  9.11              0.84\n",
       "397  9.45              0.91\n",
       "398  8.78              0.67\n",
       "399  9.66              0.95\n",
       "\n",
       "[400 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d4547a0a",
   "metadata": {},
   "outputs": [],
   "source": [
    " x=my_data2.iloc[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "92464781",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      9.65\n",
       "1      8.87\n",
       "2      8.00\n",
       "3      8.67\n",
       "4      8.21\n",
       "       ... \n",
       "395    9.04\n",
       "396    9.11\n",
       "397    9.45\n",
       "398    8.78\n",
       "399    9.66\n",
       "Name: CGPA, Length: 400, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "856a8daa",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=my_data2.iloc[:,0].values.reshape(-1,1)\n",
    "y=my_data2.iloc[:,0].values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "611a7354",
   "metadata": {},
   "source": [
    "# Splitting  the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b8d11bf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scikit-learn in c:\\users\\sn112\\anaconda3\\envs\\elmuki\\lib\\site-packages (1.3.2)Note: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "Requirement already satisfied: numpy<2.0,>=1.17.3 in c:\\users\\sn112\\anaconda3\\envs\\elmuki\\lib\\site-packages (from scikit-learn) (1.26.0)\n",
      "Requirement already satisfied: scipy>=1.5.0 in c:\\users\\sn112\\anaconda3\\envs\\elmuki\\lib\\site-packages (from scikit-learn) (1.11.3)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\sn112\\anaconda3\\envs\\elmuki\\lib\\site-packages (from scikit-learn) (1.3.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\sn112\\anaconda3\\envs\\elmuki\\lib\\site-packages (from scikit-learn) (3.2.0)\n"
     ]
    }
   ],
   "source": [
    "pip install scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e7602a5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e08a28fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "df7b7801",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8.56],\n",
       "       [8.6 ],\n",
       "       [8.76],\n",
       "       [8.26],\n",
       "       [8.73],\n",
       "       [8.1 ],\n",
       "       [8.69],\n",
       "       [8.09],\n",
       "       [9.36],\n",
       "       [9.42],\n",
       "       [7.8 ],\n",
       "       [9.28],\n",
       "       [8.56],\n",
       "       [7.25],\n",
       "       [9.1 ],\n",
       "       [8.3 ],\n",
       "       [8.18],\n",
       "       [9.15],\n",
       "       [7.89],\n",
       "       [8.69],\n",
       "       [9.16],\n",
       "       [9.14],\n",
       "       [8.47],\n",
       "       [7.34],\n",
       "       [8.87],\n",
       "       [8.04],\n",
       "       [7.54],\n",
       "       [8.3 ],\n",
       "       [9.19],\n",
       "       [8.25],\n",
       "       [8.04],\n",
       "       [8.55],\n",
       "       [8.65],\n",
       "       [8.03],\n",
       "       [8.92],\n",
       "       [8.72],\n",
       "       [7.92],\n",
       "       [9.23],\n",
       "       [8.27],\n",
       "       [9.66],\n",
       "       [8.46],\n",
       "       [8.27],\n",
       "       [8.2 ],\n",
       "       [8.87],\n",
       "       [9.11],\n",
       "       [8.  ],\n",
       "       [7.65],\n",
       "       [8.37],\n",
       "       [8.14],\n",
       "       [8.07],\n",
       "       [8.48],\n",
       "       [8.96],\n",
       "       [8.32],\n",
       "       [9.07],\n",
       "       [8.64],\n",
       "       [8.8 ],\n",
       "       [8.  ],\n",
       "       [8.4 ],\n",
       "       [8.8 ],\n",
       "       [9.1 ],\n",
       "       [8.9 ],\n",
       "       [7.64],\n",
       "       [8.21],\n",
       "       [7.67],\n",
       "       [8.98],\n",
       "       [9.22],\n",
       "       [8.64],\n",
       "       [9.34],\n",
       "       [8.89],\n",
       "       [8.74],\n",
       "       [7.9 ],\n",
       "       [9.13],\n",
       "       [9.22],\n",
       "       [7.9 ],\n",
       "       [9.46],\n",
       "       [8.2 ],\n",
       "       [8.36],\n",
       "       [8.43],\n",
       "       [9.54],\n",
       "       [7.89]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0a8cb4c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "766a2758",
   "metadata": {},
   "outputs": [],
   "source": [
    "lm=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "adf8cc39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "16a5c1d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Ypredict=lm.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "566af004",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8.56],\n",
       "       [8.6 ],\n",
       "       [8.76],\n",
       "       [8.26],\n",
       "       [8.73],\n",
       "       [8.1 ],\n",
       "       [8.69],\n",
       "       [8.09],\n",
       "       [9.36],\n",
       "       [9.42],\n",
       "       [7.8 ],\n",
       "       [9.28],\n",
       "       [8.56],\n",
       "       [7.25],\n",
       "       [9.1 ],\n",
       "       [8.3 ],\n",
       "       [8.18],\n",
       "       [9.15],\n",
       "       [7.89],\n",
       "       [8.69],\n",
       "       [9.16],\n",
       "       [9.14],\n",
       "       [8.47],\n",
       "       [7.34],\n",
       "       [8.87],\n",
       "       [8.04],\n",
       "       [7.54],\n",
       "       [8.3 ],\n",
       "       [9.19],\n",
       "       [8.25],\n",
       "       [8.04],\n",
       "       [8.55],\n",
       "       [8.65],\n",
       "       [8.03],\n",
       "       [8.92],\n",
       "       [8.72],\n",
       "       [7.92],\n",
       "       [9.23],\n",
       "       [8.27],\n",
       "       [9.66],\n",
       "       [8.46],\n",
       "       [8.27],\n",
       "       [8.2 ],\n",
       "       [8.87],\n",
       "       [9.11],\n",
       "       [8.  ],\n",
       "       [7.65],\n",
       "       [8.37],\n",
       "       [8.14],\n",
       "       [8.07],\n",
       "       [8.48],\n",
       "       [8.96],\n",
       "       [8.32],\n",
       "       [9.07],\n",
       "       [8.64],\n",
       "       [8.8 ],\n",
       "       [8.  ],\n",
       "       [8.4 ],\n",
       "       [8.8 ],\n",
       "       [9.1 ],\n",
       "       [8.9 ],\n",
       "       [7.64],\n",
       "       [8.21],\n",
       "       [7.67],\n",
       "       [8.98],\n",
       "       [9.22],\n",
       "       [8.64],\n",
       "       [9.34],\n",
       "       [8.89],\n",
       "       [8.74],\n",
       "       [7.9 ],\n",
       "       [9.13],\n",
       "       [9.22],\n",
       "       [7.9 ],\n",
       "       [9.46],\n",
       "       [8.2 ],\n",
       "       [8.36],\n",
       "       [8.43],\n",
       "       [9.54],\n",
       "       [7.89]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Ypredict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "eebd4746",
   "metadata": {},
   "outputs": [],
   "source": [
    "comparison=pd.DataFrame(x_test,columns=[\"input data\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f2b897cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "comparison[\"AVL_o/p\"]=y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e88ce276",
   "metadata": {},
   "outputs": [],
   "source": [
    "comparison[\"pred_o/p\"]=Ypredict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "40bcf7bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>input data</th>\n",
       "      <th>AVL_o/p</th>\n",
       "      <th>pred_o/p</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.56</td>\n",
       "      <td>8.56</td>\n",
       "      <td>8.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.60</td>\n",
       "      <td>8.60</td>\n",
       "      <td>8.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.76</td>\n",
       "      <td>8.76</td>\n",
       "      <td>8.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.26</td>\n",
       "      <td>8.26</td>\n",
       "      <td>8.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.73</td>\n",
       "      <td>8.73</td>\n",
       "      <td>8.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>8.20</td>\n",
       "      <td>8.20</td>\n",
       "      <td>8.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>8.36</td>\n",
       "      <td>8.36</td>\n",
       "      <td>8.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>8.43</td>\n",
       "      <td>8.43</td>\n",
       "      <td>8.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>9.54</td>\n",
       "      <td>9.54</td>\n",
       "      <td>9.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>7.89</td>\n",
       "      <td>7.89</td>\n",
       "      <td>7.89</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    input data  AVL_o/p  pred_o/p\n",
       "0         8.56     8.56      8.56\n",
       "1         8.60     8.60      8.60\n",
       "2         8.76     8.76      8.76\n",
       "3         8.26     8.26      8.26\n",
       "4         8.73     8.73      8.73\n",
       "..         ...      ...       ...\n",
       "75        8.20     8.20      8.20\n",
       "76        8.36     8.36      8.36\n",
       "77        8.43     8.43      8.43\n",
       "78        9.54     9.54      9.54\n",
       "79        7.89     7.89      7.89\n",
       "\n",
       "[80 rows x 3 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2419deff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 3.1554436208840472e-30\n",
      "R^2 Score: nan\n",
      "Coefficients: [0.66666667 0.66666667 0.66666667]\n",
      "Intercept: -0.3333333333333304\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SN112\\anaconda3\\envs\\ELMUKI\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:996: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "06750c10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 3.1554436208840472e-30\n",
      "R^2 Score: nan\n",
      "Coefficients: [0.66666667 0.66666667 0.66666667]\n",
      "Intercept: -0.3333333333333304\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SN112\\anaconda3\\envs\\ELMUKI\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:996: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c3336272",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 3.1554436208840472e-30\n",
      "R^2 Score: nan\n",
      "Coefficients: [0.66666667 0.66666667 0.66666667]\n",
      "Intercept: -0.3333333333333304\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SN112\\anaconda3\\envs\\ELMUKI\\Lib\\site-packages\\sklearn\\metrics\\_regression.py:996: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "589c7c88",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
